// Code generated by command: go run gen.go -out ../decompress_amd64.s -pkg=huff0. DO NOT EDIT.

//go:build !appengine && !noasm && gc && !noasm

// func decompress4x_main_loop_amd64(ctx *decompress4xContext) uint8
TEXT ·decompress4x_main_loop_amd64(SB), $8-9
	XORQ SI, SI
	XORQ BX, BX

	// Preload values
	MOVQ    ctx+0(FP), AX
	MOVBQZX 32(AX), DI
	MOVQ    40(AX), R8
	MOVQ    48(AX), R9
	MOVQ    (AX), R10
	MOVQ    8(AX), R11
	MOVQ    16(AX), R12
	MOVQ    24(AX), R13

	// Main loop
main_loop:
	// br0.fillFast()
	MOVQ    24(R10), R14
	MOVQ    32(R10), BP
	MOVBQZX 40(R10), R15
	CMPQ    R15, $0x2a
	JBE     skip_fill0
	SUBQ    $0x20, R15
	SUBQ    $0x04, R14
	MOVQ    (R10), AX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R14)(AX*1), AX
	MOVQ R15, CX
	SHLQ CL, AX
	ORQ  AX, BP

	// exhausted = exhausted || (br0.off < 4)
	CMPQ  R14, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill0:
	// val0 := br0.peekTopBits(peekBits)
	MOVQ BP, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R9)(DX*2), DX

	// br0.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// val1 := br0.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ BP, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R9)(DX*2), DX

	// br0.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// these two writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, (R8)(SI*1)

	// update the bitrader reader structure
	MOVQ R14, 24(R10)
	MOVQ BP, 32(R10)
	MOVB R15, 40(R10)

	// br1.fillFast()
	MOVQ    24(R11), R14
	MOVQ    32(R11), BP
	MOVBQZX 40(R11), R15
	CMPQ    R15, $0x2a
	JBE     skip_fill1
	SUBQ    $0x20, R15
	SUBQ    $0x04, R14
	MOVQ    (R11), AX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R14)(AX*1), AX
	MOVQ R15, CX
	SHLQ CL, AX
	ORQ  AX, BP

	// exhausted = exhausted || (br1.off < 4)
	CMPQ  R14, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill1:
	// val0 := br1.peekTopBits(peekBits)
	MOVQ BP, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R9)(DX*2), DX

	// br1.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// val1 := br1.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ BP, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R9)(DX*2), DX

	// br1.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// these two writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, 256(R8)(SI*1)

	// update the bitrader reader structure
	MOVQ R14, 24(R11)
	MOVQ BP, 32(R11)
	MOVB R15, 40(R11)

	// br2.fillFast()
	MOVQ    24(R12), R14
	MOVQ    32(R12), BP
	MOVBQZX 40(R12), R15
	CMPQ    R15, $0x2a
	JBE     skip_fill2
	SUBQ    $0x20, R15
	SUBQ    $0x04, R14
	MOVQ    (R12), AX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R14)(AX*1), AX
	MOVQ R15, CX
	SHLQ CL, AX
	ORQ  AX, BP

	// exhausted = exhausted || (br2.off < 4)
	CMPQ  R14, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill2:
	// val0 := br2.peekTopBits(peekBits)
	MOVQ BP, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R9)(DX*2), DX

	// br2.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// val1 := br2.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ BP, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R9)(DX*2), DX

	// br2.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// these two writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, 512(R8)(SI*1)

	// update the bitrader reader structure
	MOVQ R14, 24(R12)
	MOVQ BP, 32(R12)
	MOVB R15, 40(R12)

	// br3.fillFast()
	MOVQ    24(R13), R14
	MOVQ    32(R13), BP
	MOVBQZX 40(R13), R15
	CMPQ    R15, $0x2a
	JBE     skip_fill3
	SUBQ    $0x20, R15
	SUBQ    $0x04, R14
	MOVQ    (R13), AX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R14)(AX*1), AX
	MOVQ R15, CX
	SHLQ CL, AX
	ORQ  AX, BP

	// exhausted = exhausted || (br3.off < 4)
	CMPQ  R14, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill3:
	// val0 := br3.peekTopBits(peekBits)
	MOVQ BP, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R9)(DX*2), DX

	// br3.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// val1 := br3.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ BP, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R9)(DX*2), DX

	// br3.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, BP
	ADDQ    CX, R15

	// these two writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, 768(R8)(SI*1)

	// update the bitrader reader structure
	MOVQ  R14, 24(R13)
	MOVQ  BP, 32(R13)
	MOVB  R15, 40(R13)
	ADDB  $0x02, SI
	TESTB BH, BH
	JNZ   done
	CMPB  SI, $0x00
	JNZ   main_loop

done:
	MOVB SI, ret+8(FP)
	RET

// func decompress4x_8b_main_loop_amd64(ctx *decompress4xContext) uint8
TEXT ·decompress4x_8b_main_loop_amd64(SB), $8-9
	XORQ DX, DX
	XORQ BX, BX

	// Preload values
	MOVQ    ctx+0(FP), CX
	MOVBQZX 32(CX), SI
	MOVQ    40(CX), DI
	MOVQ    48(CX), R8
	MOVQ    (CX), R9
	MOVQ    8(CX), R10
	MOVQ    16(CX), R11
	MOVQ    24(CX), R12

	// Main loop
main_loop:
	// br0.fillFast()
	MOVQ    24(R9), R13
	MOVQ    32(R9), R15
	MOVBQZX 40(R9), R14
	CMPQ    R14, $0x20
	JBE     skip_fill0
	SUBQ    $0x20, R14
	SUBQ    $0x04, R13
	MOVQ    (R9), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R13)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	ORQ  BP, R15

	// exhausted = exhausted || (br0.off < 4)
	CMPQ  R13, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill0:
	// val0 := br0.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v0 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br0.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val1 := br0.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v1 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br0.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br0.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v2 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br0.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val3 := br0.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v3 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br0.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, (DI)(DX*1)

	// update the bitrader reader structure
	MOVQ R13, 24(R9)
	MOVQ R15, 32(R9)
	MOVB R14, 40(R9)

	// br1.fillFast()
	MOVQ    24(R10), R13
	MOVQ    32(R10), R15
	MOVBQZX 40(R10), R14
	CMPQ    R14, $0x20
	JBE     skip_fill1
	SUBQ    $0x20, R14
	SUBQ    $0x04, R13
	MOVQ    (R10), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R13)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	ORQ  BP, R15

	// exhausted = exhausted || (br1.off < 4)
	CMPQ  R13, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill1:
	// val0 := br1.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v0 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br1.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val1 := br1.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v1 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br1.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br1.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v2 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br1.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val3 := br1.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v3 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br1.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, 256(DI)(DX*1)

	// update the bitrader reader structure
	MOVQ R13, 24(R10)
	MOVQ R15, 32(R10)
	MOVB R14, 40(R10)

	// br2.fillFast()
	MOVQ    24(R11), R13
	MOVQ    32(R11), R15
	MOVBQZX 40(R11), R14
	CMPQ    R14, $0x20
	JBE     skip_fill2
	SUBQ    $0x20, R14
	SUBQ    $0x04, R13
	MOVQ    (R11), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R13)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	ORQ  BP, R15

	// exhausted = exhausted || (br2.off < 4)
	CMPQ  R13, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill2:
	// val0 := br2.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v0 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br2.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val1 := br2.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v1 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br2.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br2.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v2 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br2.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val3 := br2.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v3 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br2.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, 512(DI)(DX*1)

	// update the bitrader reader structure
	MOVQ R13, 24(R11)
	MOVQ R15, 32(R11)
	MOVB R14, 40(R11)

	// br3.fillFast()
	MOVQ    24(R12), R13
	MOVQ    32(R12), R15
	MOVBQZX 40(R12), R14
	CMPQ    R14, $0x20
	JBE     skip_fill3
	SUBQ    $0x20, R14
	SUBQ    $0x04, R13
	MOVQ    (R12), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R13)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	ORQ  BP, R15

	// exhausted = exhausted || (br3.off < 4)
	CMPQ  R13, $0x04
	SETLT BL
	ORB   BL, BH

skip_fill3:
	// val0 := br3.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v0 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br3.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val1 := br3.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v1 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br3.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br3.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v2 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br3.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14

	// val3 := br3.peekTopBits(peekBits)
	MOVQ R15, BP
	MOVQ SI, CX
	SHRQ CL, BP

	// v3 := table[val0&mask]
	MOVW (R8)(BP*2), CX

	// br3.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R15
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, 768(DI)(DX*1)

	// update the bitrader reader structure
	MOVQ  R13, 24(R12)
	MOVQ  R15, 32(R12)
	MOVB  R14, 40(R12)
	ADDB  $0x04, DL
	TESTB BH, BH
	JNZ   done
	CMPB  DL, $0x00
	JNZ   main_loop

done:
	MOVB DL, ret+8(FP)
	RET
