// Code generated by command: go run gen.go -out ../decompress_amd64.s -pkg=huff0. DO NOT EDIT.

//go:build amd64 && !appengine && !noasm && gc

// func decompress4x_main_loop_amd64(ctx *decompress4xContext)
TEXT ·decompress4x_main_loop_amd64(SB), $8-8
	XORQ BX, BX

	// Preload values
	MOVQ    ctx+0(FP), AX
	MOVBQZX 32(AX), DI
	MOVQ    40(AX), R8
	MOVQ    R8, SI
	MOVQ    72(AX), CX
	MOVQ    CX, (SP)
	MOVQ    48(AX), R9
	MOVQ    56(AX), R10
	MOVQ    (AX), R11
	MOVQ    8(AX), R12
	MOVQ    16(AX), R13
	MOVQ    24(AX), R14

	// Main loop
main_loop:
	MOVQ  SI, R8
	CMPQ  R8, (SP)
	SETGE BL

	// br0.fillFast32()
	MOVQ    32(R11), R15
	MOVBQZX 40(R11), BP
	CMPQ    BP, $0x20
	JBE     skip_fill0
	MOVQ    24(R11), AX
	SUBQ    $0x20, BP
	SUBQ    $0x04, AX
	MOVQ    (R11), DX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (AX)(DX*1), DX
	MOVQ BP, CX
	SHLQ CL, DX
	MOVQ AX, 24(R11)
	ORQ  DX, R15

	// exhausted = exhausted || (br0.off < 4)
	CMPQ  AX, $0x04
	SETLT AL
	ORB   AL, BL

skip_fill0:
	// val0 := br0.peekTopBits(peekBits)
	MOVQ R15, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R10)(DX*2), DX

	// br0.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// val1 := br0.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ R15, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R10)(DX*2), DX

	// br0.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// these two writes get coalesced
	// out[stream][off] = uint8(v0.entry >> 8)
	// out[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, (R8)

	// update the bitrader reader structure
	MOVQ R15, 32(R11)
	MOVB BP, 40(R11)
	ADDQ R9, R8

	// br1.fillFast32()
	MOVQ    32(R12), R15
	MOVBQZX 40(R12), BP
	CMPQ    BP, $0x20
	JBE     skip_fill1
	MOVQ    24(R12), AX
	SUBQ    $0x20, BP
	SUBQ    $0x04, AX
	MOVQ    (R12), DX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (AX)(DX*1), DX
	MOVQ BP, CX
	SHLQ CL, DX
	MOVQ AX, 24(R12)
	ORQ  DX, R15

	// exhausted = exhausted || (br1.off < 4)
	CMPQ  AX, $0x04
	SETLT AL
	ORB   AL, BL

skip_fill1:
	// val0 := br1.peekTopBits(peekBits)
	MOVQ R15, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R10)(DX*2), DX

	// br1.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// val1 := br1.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ R15, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R10)(DX*2), DX

	// br1.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// these two writes get coalesced
	// out[stream][off] = uint8(v0.entry >> 8)
	// out[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, (R8)

	// update the bitrader reader structure
	MOVQ R15, 32(R12)
	MOVB BP, 40(R12)
	ADDQ R9, R8

	// br2.fillFast32()
	MOVQ    32(R13), R15
	MOVBQZX 40(R13), BP
	CMPQ    BP, $0x20
	JBE     skip_fill2
	MOVQ    24(R13), AX
	SUBQ    $0x20, BP
	SUBQ    $0x04, AX
	MOVQ    (R13), DX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (AX)(DX*1), DX
	MOVQ BP, CX
	SHLQ CL, DX
	MOVQ AX, 24(R13)
	ORQ  DX, R15

	// exhausted = exhausted || (br2.off < 4)
	CMPQ  AX, $0x04
	SETLT AL
	ORB   AL, BL

skip_fill2:
	// val0 := br2.peekTopBits(peekBits)
	MOVQ R15, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R10)(DX*2), DX

	// br2.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// val1 := br2.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ R15, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R10)(DX*2), DX

	// br2.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// these two writes get coalesced
	// out[stream][off] = uint8(v0.entry >> 8)
	// out[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, (R8)

	// update the bitrader reader structure
	MOVQ R15, 32(R13)
	MOVB BP, 40(R13)
	ADDQ R9, R8

	// br3.fillFast32()
	MOVQ    32(R14), R15
	MOVBQZX 40(R14), BP
	CMPQ    BP, $0x20
	JBE     skip_fill3
	MOVQ    24(R14), AX
	SUBQ    $0x20, BP
	SUBQ    $0x04, AX
	MOVQ    (R14), DX

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (AX)(DX*1), DX
	MOVQ BP, CX
	SHLQ CL, DX
	MOVQ AX, 24(R14)
	ORQ  DX, R15

	// exhausted = exhausted || (br3.off < 4)
	CMPQ  AX, $0x04
	SETLT AL
	ORB   AL, BL

skip_fill3:
	// val0 := br3.peekTopBits(peekBits)
	MOVQ R15, DX
	MOVQ DI, CX
	SHRQ CL, DX

	// v0 := table[val0&mask]
	MOVW (R10)(DX*2), DX

	// br3.advance(uint8(v0.entry)
	MOVB    DH, AL
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// val1 := br3.peekTopBits(peekBits)
	MOVQ DI, CX
	MOVQ R15, DX
	SHRQ CL, DX

	// v1 := table[val1&mask]
	MOVW (R10)(DX*2), DX

	// br3.advance(uint8(v1.entry))
	MOVB    DH, AH
	MOVBQZX DL, CX
	SHLQ    CL, R15
	ADDQ    CX, BP

	// these two writes get coalesced
	// out[stream][off] = uint8(v0.entry >> 8)
	// out[stream][off+1] = uint8(v1.entry >> 8)
	MOVW AX, (R8)

	// update the bitrader reader structure
	MOVQ  R15, 32(R14)
	MOVB  BP, 40(R14)
	ADDQ  $0x02, SI
	TESTB BL, BL
	JZ    main_loop
	MOVQ  ctx+0(FP), AX
	MOVQ  40(AX), CX
	MOVQ  SI, DX
	SUBQ  CX, DX
	SHLQ  $0x02, DX
	MOVQ  DX, 64(AX)
	RET

// func decompress4x_8b_main_loop_amd64(ctx *decompress4xContext)
TEXT ·decompress4x_8b_main_loop_amd64(SB), $16-8
	XORQ DX, DX

	// Preload values
	MOVQ    ctx+0(FP), CX
	MOVBQZX 32(CX), BX
	MOVQ    40(CX), SI
	MOVQ    SI, (SP)
	MOVQ    72(CX), DX
	MOVQ    DX, 8(SP)
	MOVQ    48(CX), DI
	MOVQ    56(CX), R8
	MOVQ    (CX), R9
	MOVQ    8(CX), R10
	MOVQ    16(CX), R11
	MOVQ    24(CX), R12

	// Main loop
main_loop:
	MOVQ  (SP), SI
	CMPQ  SI, 8(SP)
	SETGE DL

	// br1000.fillFast32()
	MOVQ    32(R9), R13
	MOVBQZX 40(R9), R14
	CMPQ    R14, $0x20
	JBE     skip_fill1000
	MOVQ    24(R9), R15
	SUBQ    $0x20, R14
	SUBQ    $0x04, R15
	MOVQ    (R9), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R15)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	MOVQ R15, 24(R9)
	ORQ  BP, R13

	// exhausted = exhausted || (br1000.off < 4)
	CMPQ  R15, $0x04
	SETLT AL
	ORB   AL, DL

skip_fill1000:
	// val0 := br0.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v0 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br0.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val1 := br0.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v1 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br0.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br0.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v2 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br0.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val3 := br0.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v3 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br0.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, (SI)

	// update the bitreader reader structure
	MOVQ R13, 32(R9)
	MOVB R14, 40(R9)
	ADDQ DI, SI

	// br1001.fillFast32()
	MOVQ    32(R10), R13
	MOVBQZX 40(R10), R14
	CMPQ    R14, $0x20
	JBE     skip_fill1001
	MOVQ    24(R10), R15
	SUBQ    $0x20, R14
	SUBQ    $0x04, R15
	MOVQ    (R10), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R15)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	MOVQ R15, 24(R10)
	ORQ  BP, R13

	// exhausted = exhausted || (br1001.off < 4)
	CMPQ  R15, $0x04
	SETLT AL
	ORB   AL, DL

skip_fill1001:
	// val0 := br1.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v0 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br1.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val1 := br1.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v1 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br1.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br1.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v2 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br1.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val3 := br1.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v3 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br1.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, (SI)

	// update the bitreader reader structure
	MOVQ R13, 32(R10)
	MOVB R14, 40(R10)
	ADDQ DI, SI

	// br1002.fillFast32()
	MOVQ    32(R11), R13
	MOVBQZX 40(R11), R14
	CMPQ    R14, $0x20
	JBE     skip_fill1002
	MOVQ    24(R11), R15
	SUBQ    $0x20, R14
	SUBQ    $0x04, R15
	MOVQ    (R11), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R15)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	MOVQ R15, 24(R11)
	ORQ  BP, R13

	// exhausted = exhausted || (br1002.off < 4)
	CMPQ  R15, $0x04
	SETLT AL
	ORB   AL, DL

skip_fill1002:
	// val0 := br2.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v0 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br2.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val1 := br2.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v1 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br2.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br2.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v2 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br2.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val3 := br2.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v3 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br2.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, (SI)

	// update the bitreader reader structure
	MOVQ R13, 32(R11)
	MOVB R14, 40(R11)
	ADDQ DI, SI

	// br1003.fillFast32()
	MOVQ    32(R12), R13
	MOVBQZX 40(R12), R14
	CMPQ    R14, $0x20
	JBE     skip_fill1003
	MOVQ    24(R12), R15
	SUBQ    $0x20, R14
	SUBQ    $0x04, R15
	MOVQ    (R12), BP

	// b.value |= uint64(low) << (b.bitsRead & 63)
	MOVL (R15)(BP*1), BP
	MOVQ R14, CX
	SHLQ CL, BP
	MOVQ R15, 24(R12)
	ORQ  BP, R13

	// exhausted = exhausted || (br1003.off < 4)
	CMPQ  R15, $0x04
	SETLT AL
	ORB   AL, DL

skip_fill1003:
	// val0 := br3.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v0 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br3.advance(uint8(v0.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val1 := br3.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v1 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br3.advance(uint8(v1.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// val2 := br3.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v2 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br3.advance(uint8(v2.entry)
	MOVB    CH, AH
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14

	// val3 := br3.peekTopBits(peekBits)
	MOVQ R13, R15
	MOVQ BX, CX
	SHRQ CL, R15

	// v3 := table[val0&mask]
	MOVW (R8)(R15*2), CX

	// br3.advance(uint8(v3.entry)
	MOVB    CH, AL
	MOVBQZX CL, CX
	SHLQ    CL, R13
	ADDQ    CX, R14
	BSWAPL  AX

	// these four writes get coalesced
	// buf[stream][off] = uint8(v0.entry >> 8)
	// buf[stream][off+1] = uint8(v1.entry >> 8)
	// buf[stream][off+2] = uint8(v2.entry >> 8)
	// buf[stream][off+3] = uint8(v3.entry >> 8)
	MOVL AX, (SI)

	// update the bitreader reader structure
	MOVQ  R13, 32(R12)
	MOVB  R14, 40(R12)
	ADDQ  $0x04, (SP)
	TESTB DL, DL
	JZ    main_loop
	MOVQ  ctx+0(FP), AX
	MOVQ  40(AX), CX
	MOVQ  (SP), DX
	SUBQ  CX, DX
	SHLQ  $0x02, DX
	MOVQ  DX, 64(AX)
	RET
